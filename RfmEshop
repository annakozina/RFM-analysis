
if(!require(rfm)){
  install.packages("rfm")
  library(rfm)
}
if(!require(lubridate)){
  install.packages("lubridate")
  library(lubridate)
}

if(!require(ggplot2)){
  install.packages("ggplot2")
  library(ggplot2)
}

if(!require(crayon)){
  install.packages("crayon")
  library(crayon)
}

if(!require(fansi)){
  install.packages("fansi")
  library(fansi)
}

if(!require(utf8)){
  install.packages("fansi")
  library(utf8)
}

if(!require(cli)){
  install.packages("cli")
  library(cli)
}

if(!require(ggthemes)){
  install.packages("ggthemes")
  library(ggthemes)
}

if(!require(labeling)){
  install.packages("labeling")
  library(labeling)
}

if(!require(forcats)){
  install.packages("forcats")
  library(forcats)
}

if(!require(RColorBrewer)){
  install.packages("RColorBrewer")
  library(RColorBrewer)
}

Customer_1 <- read.csv(file.path("/home/rstudio/R/ScriptsMay/RfmEshop", "cart_customer.csv"), stringsAsFactors=FALSE)
Customer_2 <- read.csv(file.path("/home/rstudio/R/ScriptsMay/RfmEshop", "cart_order_product.csv"), sep =";", stringsAsFactors=FALSE)
Customer_3 <- read.csv(file.path("/home/rstudio/R/ScriptsMay/RfmEshop", "cart_product.csv"), stringsAsFactors=FALSE)
Customer_4 <- read.csv(file.path("/home/rstudio/R/ScriptsMay/RfmEshop","cart_country.csv"), stringsAsFactors=FALSE)
Customer_5 <- read.csv(file.path("/home/rstudio/R/ScriptsMay/RfmEshop", "cart_address.csv"), stringsAsFactors=FALSE)

str(Customer_1)
str(Customer_2)
str(Customer_3)
str(Customer_4)
str(Customer_5)

c1 <- data.frame(Customer_1)
c2 <- data.frame(Customer_2)
c3 <- data.frame(Customer_3)
c4 <- data.frame(Customer_4)
c5 <- data.frame(Customer_5)

## Создадим функцию по удалению 

FirstFunction <- function(x){
  stringr::str_replace_all(x, "[^[:alnum:]]", "")
}

SecondFunction <- function(x){
  stringr::str_replace_all(x, "[:blank:]", "")
}

c2$telephone <-sapply(c2$telephone,FirstFunction)
c2$telephone <-sapply(c2$telephone,SecondFunction)
#c2New$telephone <-as.integer(c2New$telephone)

c2$IdTel <- stringi::stri_sub(c2$telephone, -9 -1)

############################################################################################
############################################################################################
# Присвоим ID tel для таблицы C!

c1$telephone <-sapply(c1$telephone,FirstFunction)
c1$telephone <-sapply(c1$telephone,SecondFunction)
#c1$telephone <-as.numeric(c1$telephone)
c1$IdTel <- stringi::stri_sub(c1$telephone, -9 -1)
##############################################################################################
##############################################################################################
library(dplyr)
c1 <- select(c1, -c(2,3,4,9,10,11,14,16,17,18,19,20))  
c2 <- select(c2, -c(9,10,12,13,14,15,16,18,23,24,29,31,32,33,34:44))  
# Теперь объеденим данные
#c2$customer_id <- as.character(c2$customer_id)
#c1$customer_id <- as.character(c1$customer_id)

#Merged <-left_join(c2New, c1, by="customer_id")

Merged <- left_join(c2, c1, by="IdTel")
Merged <- select(Merged, -c(20:30))  
Merged <- select(Merged, -c(9,17,22,23,24,25,26,27,28))  

# Поменяем последовательность колонок для красоты

colnames(Merged)

colnames(Merged)[25] <- "date"
Merged$date <- as.Date(Merged$date)

MergedGrouped <- Merged %>%
  group_by(IdTel, date) %>%
  summarize(sum = sum(total, na.rm = TRUE),
            average = mean(total, na.rm=TRUE), 
            )


#Merged <- Merged[c("IdTel", "firstname.x", "lastname.x", "email.x", 
         #"telephone.x", "payment_city", "order_id", "name", "product_id", "total", 
         #"date_added.x", "payment_city",
         #"ip.y",  "ip.x")]

#Merged$date_added.x <-date(Merged$date_added.x)


str(MergedGrouped)
colnames(MergedGrouped)

IdTel <- as.factor(MergedGrouped$IdTel)

date <- as.Date(MergedGrouped$date)

sum <- as.integer(MergedGrouped$sum)

data <- data.frame(IdTel, date, sum)


rfm_result <- rfm_table_order(data,
                              IdTel,
                              date,
                              sum,
                              analysis_date=Sys.Date(),
                              recency_bins = 3,
                              frequency_bins = 3,
                              monetary_bins = 3)



Rfm<-data.frame(rfm_result$rfm)

                                                 
M <- Merged %>% 
distinct(IdTel, .keep_all = TRUE)%>%
select(IdTel, firstname.x,lastname.x,email.x,customer_id.x)

colnames(Rfm)[1] <- "IdTel"


RfmWc <- full_join(Rfm, M, by="IdTel")  

# The heat map shows the average monetary value for different categories of recency 
#and frequency scores. Higher scores of frequency and recency are characterized by higher 
#average monetary value as indicated by the darker areas in the heatmap.

rfm_score <- c("111", "112", "113",
               "121", "122", "123", 
               "131", "132", "133", 
               "211", "212", "213", 
               "221", "222", "223", 
               "231", "232", "233",
               "311", "312", "313",
               "321", "322", "323",
               "331", "332", "333")
#
 status <- c("Потерянные экономные",	
           "Одноразовые",
           "Одноразовые",
           "Уходящие редкие",	
           "Уходящие редкие",
           "Уходящие редкие",	
           "Уходящие постоянные",	
           "Уходящие хорошие постоянные",
           "Уходящие VIP",
           "Спящие разовые с маленьким чеком",
           "Спящие разовые с маленьким чеком",
           "Спящие разовые с маленьким чеком",
           "Спящие редкие с маленьким чеком",
           "Спящие редкие со средним чеком",
           "Спящие редкие с высоким чеком",
           "Спящие постоянные с маленьким чеком",
           "Спящие постоянные со средним чеком",
           "Спящие постоянные с высоким чеком",
           "Новички с маленьким чеком",
           "Новички со средним чеком",
           "Новички с высоким чеком. Потенциальные VIP",
           "Постоянные с маленьким чеком",
           "Постоянные со средним чеком",
           "Постоянные с высоким чеком",
           "Постоянные с маленьким чеком",
           "Постоянные со средним чеком",
           "VIP")


 category <- c("уходящие", "уходящие", "уходящие", "уходящие",
              "уходящие", "уходящие","уходящие","уходящие","уходящие", 
              "спящие", "спящие", "спящие", "спящие",
              "спящие", "спящие", "спящие", "спящие", "спящие",
              "постоянные", "постоянные", "постоянные", "постоянные",
              "постоянные", "постоянные", "постоянные", "постоянные", "постоянные")

RfmWc$rfm_score <- as.factor(RfmWc$rfm_score)
rfm_describe$rfm_score <- as.factor(rfm_describe$rfm_score)

rfm_describe <- data.frame(cbind(rfm_score, status, category))

RfmWc <- left_join(RfmWc, rfm_describe, by="rfm_score")  



rfm_heatmap(rfm_result)

rfm_bar_chart(rfm_result, bar_color = "bisque4",
              xaxis_title = "Деньги", sec_xaxis_title = "Частота",
              yaxis_title = " ", sec_yaxis_title = "Недавность")

#monetary value (total revenue generated by each customer)
#recency days (days since the most recent visit for each customer)
#frequency (transaction count for each customer)

rfm_histograms(rfm_result)
rfm_histograms(rfm_result, hist_bins = 10, hist_color = "darkblue",
               plot_title = "Относительная частота", xaxis_title = " ",
               yaxis_title = "Количество", hist_m_label = "Деньги",
               hist_r_label = "Недавно", hist_f_label = "Частота",
               plot_title_justify = 0.5)

# Шаг 3 - Создадим сегменты (от самых лояльных до потерянных)
#segment_names <- c("Лояльный", "Лояльный_покупатель", "Может_быть_лояльным",
                   "Новичок", "Падающий_надежду", "Требует_внимания", "Засыпает",
                   "В_зоне_риска", "Нельзя_терять", "В_спячке", "Потерян")



segment_names <- c("Champions", "Loyal Customers", "Potential Loyalist",
                   "New Customers", "Promising", "Need Attention", "About To Sleep",
                   "At Risk", "Can't Lose Them", "Lost")

recency_lower <- c(4, 2, 3, 4, 3, 2, 2, 1, 1, 1)
recency_upper <- c(5, 5, 5, 5, 4, 3, 3, 2, 1, 2)
frequency_lower <- c(4, 3, 1, 1, 1, 2, 1, 2, 4, 1)
frequency_upper <- c(5, 5, 3, 1, 1, 3, 2, 5, 5, 2)
monetary_lower <- c(4, 3, 1, 1, 1, 2, 1, 2, 4, 1)
monetary_upper <- c(5, 5, 3, 1, 1, 3, 2, 5, 5, 2)













